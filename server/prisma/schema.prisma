generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  password            String
  name                String
  customerId          String?        @unique
  twoFactorSecret     String?
  twoFactorEnabled    Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  failedLoginAttempts Int            @default(0)
  lastLogin           DateTime?
  lockedUntil         DateTime?
  resetToken          String?
  resetTokenExpiry    DateTime?
  isActive            Boolean        @default(true)
  cvs                 CV[]
  payments            Payment[]
  subscriptions       Subscription[]
  profile             UserProfile?
}

model UserProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  location       String?
  profession     String?
  bio            String?
  profilePictureUrl String?
  linkedInUrl    String?
  githubUrl      String?
  websiteUrl     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CV {
  id              String      @id @default(cuid())
  title           String
  content         String      // JSON string containing the CV data
  templateId      String      // Reference to which template is being used
  isPublic        Boolean     @default(false)
  shareableLink   String?     @unique // For public sharing without login
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  atsScore        Int?
  user            User        @relation(fields: [userId], references: [id])
  sections        CVSection[]
  jobApplications JobApplication[]

  @@index([userId])
  @@index([isPublic])
}

model CVSection {
  id        String   @id @default(cuid())
  title     String
  content   String
  order     Int
  cvId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cv        CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  @@index([cvId])
}

model CVTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  thumbnail   String   // URL to template thumbnail
  isDefault   Boolean  @default(false)
  isPremium   Boolean  @default(false) // Whether this requires subscription
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JobApplication {
  id           String   @id @default(cuid())
  cvId         String
  jobTitle     String
  company      String
  description  String?
  appliedDate  DateTime @default(now())
  status       String   // "applied", "interviewing", "offered", "rejected", etc.
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cv           CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  @@index([cvId])
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  currency        String
  status          String
  createdAt       DateTime @default(now())
  stripePaymentId String
  user            User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeCustomerId     String
  stripePriceId        String
  stripeSubscriptionId String
  user                 User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}
